plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id "io.freefair.lombok" version "6.1.0-m3"
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

version = "MC${minecraft_version}-${getVersion()}"
group = "com.tterrag.registrate"
archivesBaseName = "Registrate"

repositories {
    maven { url = 'https://repo.maven.apache.org/maven2' }
    maven { url = 'https://maven.devos.community/releases' }
}

dependencies {
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation(include("me.alphamode:ForgeTags:1.0"))

    compileOnly 'org.projectlombok:lombok:1.18.22'

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

loom {
    runs {
        datagen {
            server()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

            runDir "build/datagen"
        }
    }
}
assemble.dependsOn runDatagen

loom {
    accessWidenerPath = file("src/main/resources/registrate.accesswidener")
}

loom {
    runs {
        datagen {
            server()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

            runDir "build/datagen"
        }
    }
}
assemble.dependsOn runDatagen

loom {
    runs {
        datagen {
            server()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

            runDir "build/datagen"
        }
    }
}
assemble.dependsOn runDatagen

lombok {
    version = "1.18.20"
    config['lombok.addJavaxGeneratedAnnotation'] = 'true'
}

delombok {
    format = [
            'suppressWarnings': 'skip',
            'javaLangAsFQN': 'skip'
    ]
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.delombokTask
    exclude 'com.tterrag.registrate.test.*'
}

javadoc {
    source = delombok
    options.addStringOption('tag', 'apiNote:a:API Note:')
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 16
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        String suffix = System.getenv().PUBLISH_SUFFIX // 'releases' or 'snapshots'
        if (suffix == null || suffix.isEmpty()) {
            System.out.println("Failed to publish to maven! publishSuffix is not set.")
            return
        }
        maven {
            url = "https://maven.devos.community/${suffix}/"
            credentials {
                username = System.getenv().MAVEN_USER
                password = System.getenv().MAVEN_PASS
            }
            authentication { basic(BasicAuthentication) }
        }
    }
}
