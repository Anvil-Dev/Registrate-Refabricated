//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
    id "fabric-loom" version "1.0.+"
    id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
    id "io.freefair.lombok" version "6.1.0-m3"
    id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = "${project.mod_version}-MC${minecraft_version}"
group = "com.tterrag.registrate_fabric"
archivesBaseName = "Registrate-Fabric"

repositories {
    mavenLocal()
    maven { url = "https://maven.quiltmc.org/repository/release" }
    maven { url = "https://repo.maven.apache.org/maven2" }
    maven { url = "https://mvn.devos.one/snapshots" }
    maven {
        url = "https://jitpack.io"
        content {
            includeGroup("com.github.LlamaLad7")
        }
    }
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.qm_version}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    include(modImplementation(fabricApi.module("fabric-data-generation-api-v1", project.fabric_version))) // include datagen api
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:tags:${project.porting_lib_version}"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:model_generators:${project.porting_lib_version}"))
    implementation(include("com.github.LlamaLad7:MixinExtras:0.0.11"))
    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.0.11")

    compileOnly("org.projectlombok:lombok:1.18.22")

    implementation("javax.annotation:javax.annotation-api:1.3.2")
    implementation ("org.jetbrains:annotations:20.1.0")
}

task buildOrPublish {
    group = "build"
    String mavenUser = System.getenv().MAVEN_USER
    if (mavenUser != null && !mavenUser.isEmpty()) {
        dependsOn(tasks.getByName("publish"))
        println "prepared for publish"
    } else {
        dependsOn(tasks.getByName("build"))
        println "prepared for build"
    }
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        compileClasspath += main.output
        runtimeClasspath += main.runtimeClasspath
        runtimeClasspath += main.output
    }
}

loom {
    accessWidenerPath = file("src/main/resources/registrate-fabric.accesswidener")

    runs {
        datagen {
            server()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

            runDir "build/datagen"
        }
        testmodClient {
            client()
            name "Testmod Client"
            source sourceSets.testmod
            runDir "run/test"
        }
        testmodServer {
            server()
            name "Testmod Server"
            source sourceSets.testmod
            runDir "run/test_server"
        }
    }
}

lombok {
    version = "1.18.20"
    config["lombok.addJavaxGeneratedAnnotation"] = "true"
}

delombok {
    format = [
            "suppressWarnings": "skip",
            "javaLangAsFQN": "skip"
    ]
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.delombokTask
    exclude "com.tterrag.registrate.test.*"
}

javadoc {
    source = delombok
    options.addStringOption("tag", "apiNote:a:API Note:")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url = "https://mvn.devos.one/${System.getenv().PUBLISH_SUFFIX}/"
            credentials {
                username = System.getenv().MAVEN_USER
                password = System.getenv().MAVEN_PASS
            }
            authentication { basic(BasicAuthentication) }
        }
    }
}
