buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}
plugins {
    id "io.freefair.lombok" version "4.1.5"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

import org.ajoberstar.grgit.Grgit

def repo = Grgit.open(project.file('.'))
project.ext.gitHash = repo.log().find().abbreviatedId

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equals('false');

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : project.ext.gitHash

version = "MC${minecraft_version}-${mod_version}.${buildnumber}"
group = "com.tterrag.registrate"
archivesBaseName = "Registrate"

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20191118-1.14.3'
    
    runs {
        client {
            taskName 'testmod_client'
            
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                testmod {
                    source sourceSets.test
                    source sourceSets.main
                }
            }
        }
        server {
            taskName 'testmod_server'
            
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                testmod {
                    source sourceSets.test
                    source sourceSets.main
                }
            }
        }
        data {
            taskName 'testmod_data'
        
            workingDirectory project.file('run')
            
            environment 'target', 'fmluserdevdata'

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                tropicraft {
                    source sourceSets.test
                    source sourceSets.main
                }
            }
            
            args '--mod', 'testmod', '--all', '--output', '"' + rootProject.file('src/generated/resources/') + '"'
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    testImplementation     "org.junit.jupiter:junit-jupiter-api:5.2.0"
    testRuntime         "org.junit.jupiter:junit-jupiter-engine:5.2.0"
}

lombok {
    version = "1.18.10"
    config['lombok.addJavaxGeneratedAnnotation'] = 'true'
}

delombok {
    format = [
        'suppressWarnings': 'skip',
        'javaLangAsFQN': 'skip'
    ]
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.delombokTask
}

javadoc {
    source = delombok
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "Chisel ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}
